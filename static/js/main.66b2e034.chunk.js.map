{"version":3,"sources":["components/badge/index.js","components/cards/index.js","global/variables.js","views/Home/index.js","views/Home/controller.js","views/StationInformation/index.js","views/StationInformation/controller.js","components/navigationBar/index.js","App.js","reportWebVitals.js","index.js"],"names":["Badge","props","className","status","style","title","CircleBadge","large","StationCard","data","to","id","name","map","item","display_name","value","unit","API","Home","ws","WebSocket","useState","stationData","setStationData","useEffect","callback","onopen","console","log","Axios","get","then","res","station_id","StationInformation","dateNow","Date","getHours","getDate","getMonth","getFullYear","stationChartData","setStationChartData","timeNow","setTimeNow","chartTime","setChartTime","view","setView","from_time","to_time","fromTime","Math","floor","getTime","toTime","post","result","getStationHistorical","parseInt","match","params","reverse","chartResult","filter","i","chartTimes","itemDate","timestamp","time","UTC","temperature","setInterval","updateTime","monthNowStr","dateNowStr","hoursNowStr","minutesNowStr","getMinutes","secondNowStr","getSeconds","yearNow","color","fontSize","fontWeight","borderStyle","borderWidth","borderColor","paddingLeft","paddingRight","cursor","background","onClick","humidity","pH","conductivity","highcharts","Highcharts","options","chart","type","xAxis","max","text","series","pointPlacement","pointRange","x","y","NavigationBar","Main","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.66b2e034.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./styles.scss\";\r\n\r\nexport const Badge = (props) => {\r\n    return (\r\n        <div className={`badge ${props.status ? props.status : ''}`} style={props.style}> \r\n            <span className=\"badge-title\">{props.title}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const CircleBadge = (props) => {\r\n    return (\r\n        <div className={`badge circle ${props.large ? 'large' : ''} ${props.status ? props.status : ''}`} style={props.style}> \r\n            <span className=\"badge-title\">{props.title}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./styles.scss\";\r\n\r\nexport const StationCard = (props) => {\r\n    if(!props.data) return null;\r\n\r\n    return (\r\n        <Link className=\"card card-station\" to={`/station-information/${props.id}`}>\r\n            <div className=\"station-name\">\r\n                <span className=\"label\">{props.name}</span>\r\n            </div>\r\n            <div className=\"card-container\">\r\n                {props.data.map(item => {\r\n                    return (\r\n                        <div className=\"information-tag\">\r\n                            <span className=\"title\">{item.display_name}</span>\r\n                            <span className=\"value\">{item.value}</span>\r\n                            <span className=\"unit\">{item.unit ?  item.unit : '-'}</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Link>\r\n    )\r\n}","export const SERVER_URL = \"http://54.254.178.1:5000\";\r\nexport const API_VER = \"/api/v1\";\r\nexport const API = `${SERVER_URL}${API_VER}`;\r\nexport const SOCKET = `wss://54.254.178.1`;","import React, {useEffect, useState} from 'react';\r\nimport {Badge} from '../../components/badge';\r\nimport {StationCard} from '../../components/cards';\r\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\r\nimport {SOCKET} from '../../global/variables';\r\n\r\n//Local\r\nimport { fetchStationData } from './controller';\r\nimport \"./styles.scss\";\r\n\r\nexport const Home = (props) => {\r\n    //Init websocket\r\n    const ws = new WebSocket(SOCKET);\r\n\r\n    const [stationData, setStationData] = useState(null);\r\n\r\n    //Fetch data\r\n    useEffect(() => {\r\n        ws.onopen = () => {\r\n            console.log(\"CONNECTED\");\r\n        }\r\n        //Get stations data\r\n        fetchStationData(data => {\r\n            setStationData(data);\r\n        });\r\n    }, []);\r\n\r\n    if(!stationData) return null;\r\n\r\n    return (\r\n        <div className=\"view with-nav monitor\">\r\n            <header className=\"status-badges-header\">\r\n                <span className=\"header-title\">Data Alarm</span>\r\n                <Badge title=\"Lost Connection\" status=\"default\"/>\r\n                <Badge title=\"Exceeded\" status=\"error\"/>\r\n                <Badge title=\"Tend to exceed\" status=\"warning\"/>\r\n                <Badge title=\"Good\" status=\"good\"/>\r\n            </header>\r\n\r\n            <div className=\"card-container\">\r\n                {stationData.map(item => {\r\n                    return(\r\n                        <StationCard name={`TRẠM ${item.station_id}`} data={item.data} id={item.station_id}/>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import Axios from 'axios';\r\nimport {API} from '../../global/variables';\r\n\r\nexport const fetchStationData = (callback) => {\r\n    Axios.get(`${API}/stations/data`).then(res => {\r\n        return callback(res.data);\r\n    });\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport {CircleBadge} from '../../components/badge';\r\nimport {BsTable, BsBarChart} from 'react-icons/bs';\r\nimport {Link} from 'react-router-dom';\r\n\r\n//Local\r\nimport \"./styles.scss\";\r\nimport { getStationHistorical } from \"./controller\";\r\n\r\nexport const StationInformation = (props) => {\r\n    const dateNow = new Date();\r\n    const hourNow = dateNow.getHours();\r\n    const dayNow = dateNow.getDate();\r\n    const monthNow = dateNow.getMonth();\r\n    const yearNow = dateNow.getFullYear();\r\n    const [stationData, setStationData] = useState(null);\r\n    const [stationChartData, setStationChartData] = useState(null);\r\n    const [timeNow, setTimeNow] = useState(null);\r\n    const [chartTime, setChartTime] = useState(null);\r\n\r\n    const [view, setView] = useState(0);\r\n\r\n    //Fetch data\r\n    useEffect(() => {\r\n        //Get station id\r\n        var stationId = parseInt(props.match.params.id);\r\n        \r\n        var fromTime = new Date(2021, 10, 29);\r\n        var toTime = new Date(2021, 10, 30);\r\n\r\n        getStationHistorical(stationId, fromTime, toTime, result => {\r\n            setStationData(result.reverse());\r\n\r\n            //Set chart data\r\n            let chartResult = result.filter((item, i) => {\r\n                if(i%12 == 0) return true;\r\n            })\r\n\r\n            let chartTimes = chartResult.map(item => {\r\n                let itemDate = new Date(item.timestamp * 1000);\r\n\r\n                let date = Date.UTC(itemDate.getFullYear(), itemDate.getMonth(), itemDate.getDate(), itemDate.getHours() + 1);\r\n\r\n                let data = {\r\n                    time: date,\r\n                    value: item.data.temperature\r\n                }\r\n\r\n                return data;\r\n            });\r\n\r\n            setChartTime(chartTimes);\r\n            setStationChartData(chartResult.reverse());\r\n        });\r\n\r\n        //Get time count\r\n        setInterval(() => {   \r\n            updateTime();\r\n        });\r\n    }, []);\r\n\r\n    const updateTime = () => {\r\n        const dateNow = new Date();\r\n        const monthNowStr = (dateNow.getMonth() + 1) <= 9 ? '0' + dateNow.getMonth() + 1 : dateNow.getMonth() + 1;\r\n        const dateNowStr = (dateNow.getDate()) <= 9 ? '0' + dateNow.getDate() : dateNow.getDate();\r\n        const hoursNowStr = (dateNow.getHours()) <= 9 ? '0' + dateNow.getHours() : dateNow.getHours();\r\n        const minutesNowStr = (dateNow.getMinutes()) <= 9 ? '0' + dateNow.getMinutes() : dateNow.getMinutes();\r\n        const secondNowStr = (dateNow.getSeconds()) <= 9 ? '0' + dateNow.getSeconds() : dateNow.getSeconds();\r\n\r\n        setTimeNow({\r\n            yearNow: dateNow.getFullYear(),\r\n            monthNowStr,\r\n            dateNowStr,\r\n            hoursNowStr,\r\n            minutesNowStr,\r\n            secondNowStr\r\n        })\r\n    }\r\n\r\n    if(!stationData && !timeNow && !stationChartData && !chartTime) return null;\r\n\r\n    return (\r\n        <div className=\"view with-nav station\">\r\n            <header className=\"view-header\">\r\n                <div className=\"first\">\r\n                    <Link to=\"/\">\r\n                        <CircleBadge title={`TRẠM ${props.match.params.id}`} large style={{\r\n                            color :\"#8E8E8E\",\r\n                            fontSize: 15,\r\n                            fontWeight: 700,\r\n                            borderStyle: 'solid',\r\n                            borderWidth: 1,\r\n                            borderColor: \"#8E8E8E\",\r\n                            paddingLeft: 64,\r\n                            paddingRight: 64,\r\n                            cursor: 'pointer'\r\n                        }}/>\r\n                    </Link>\r\n                    <CircleBadge title={`${timeNow?.yearNow}-${timeNow?.monthNowStr}-${timeNow?.dateNowStr} ${timeNow?.hoursNowStr}:${timeNow?.minutesNowStr}:${timeNow?.secondNowStr}`} large style={{\r\n                        color :\"#FFFFFF\",\r\n                        fontSize: 15,\r\n                        fontWeight: 600,\r\n                        borderStyle: 'solid',\r\n                        borderWidth: 1,\r\n                        background: \"#2F8ED5\",\r\n                        borderColor: \"#2F8ED5\",\r\n                        paddingLeft: 64,\r\n                        paddingRight: 64,\r\n                        cursor: 'pointer'\r\n                    }}/>\r\n                </div>\r\n                <div className=\"header-spacing\"></div>\r\n                <div className=\"end\">\r\n                    <div className={`header-tab-btn ${view == 0 ? 'active' : ''}`} onClick={() => setView(0)}>\r\n                        <BsTable className=\"icon\"/>\r\n                    </div>\r\n                    <div className={`header-tab-btn ${view == 1 ? 'active' : ''}`} onClick={() => setView(1)}>\r\n                        <BsBarChart className=\"icon\"/>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            {view == 0 ? \r\n                //View 1\r\n                <div className=\"container\">\r\n                    <table>\r\n                        <tr>\r\n                            <th>TIME</th>\r\n                            <th>NHIỆT ĐỘ</th>\r\n                            <th>ĐỘ ẨM</th>\r\n                            <th>ĐỘ PH</th>\r\n                            <th>ĐỘ ĐẪN</th>\r\n                            <th>NH4+</th>\r\n                            <th>FLOW IN</th>\r\n                            <th>FLOW OUT</th>\r\n                        </tr>\r\n                        {stationData?.map((item) => {\r\n                            return (\r\n                                <tr>\r\n                                    <td>{item.timestamp}</td>\r\n                                    <td>{item.data.temperature}</td>\r\n                                    <td>{item.data.humidity}</td>\r\n                                    <td>{item.data.pH}</td>\r\n                                    <td>{item.data.conductivity}</td>\r\n                                    <td>0</td>\r\n                                    <td>0</td>\r\n                                    <td>0</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </table>\r\n                </div> : \r\n                \r\n                //View 2\r\n                <div className=\"container\">\r\n                    <HighchartsReact highcharts={Highcharts} options={{\r\n                        chart: {\r\n                            type: 'line'\r\n                        },\r\n                        xAxis: {\r\n                            type: 'datetime',\r\n                            max: chartTime[0].time\r\n                          },\r\n                        title: {\r\n                            text: 'Nhiệt Độ'\r\n                        },\r\n                        series: [{\r\n                            pointPlacement: 0,\r\n                            pointRange: 1000 * 60 * 60,\r\n                            data: [\r\n                                {\r\n                                  x: chartTime[6].time,\r\n                                  y: chartTime[6].value\r\n                                }, {\r\n                                  x: chartTime[5].time,\r\n                                  y: chartTime[5].value\r\n                                }, {\r\n                                  x: chartTime[4].time,\r\n                                  y: chartTime[4].value\r\n                                }, {\r\n                                  x: chartTime[3].time,\r\n                                  y: chartTime[3].value\r\n                                }, {\r\n                                  x: chartTime[2].time,\r\n                                  y: chartTime[2].value\r\n                                }, {\r\n                                  x: chartTime[1].time,\r\n                                  y: chartTime[1].value\r\n                                }, {\r\n                                    x: chartTime[0].time,\r\n                                    y: chartTime[0].value\r\n                                  }\r\n                            ]\r\n                          }]\r\n                    }} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import Axios from 'axios';\r\nimport {API} from '../../global/variables';\r\n\r\nexport const getStationHistorical = (station_id, from_time, to_time, callback) => {\r\n    let fromTime = Math.floor(new Date(from_time).getTime() / 1000);\r\n    let toTime = Math.floor(new Date(to_time).getTime() / 1000);\r\n\r\n    Axios.post(`${API}/station/historical`, {\r\n        station_id: station_id,\r\n        from_time: fromTime,\r\n        to_time: toTime\r\n    }).then(result => {\r\n        return callback(result.data);\r\n    })\r\n}","import React from 'react';\r\nimport {AiOutlineDashboard, AiOutlineBarChart} from 'react-icons/ai';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./styles.scss\";\r\n\r\nexport const NavigationBar = (props) => {\r\n    return (\r\n        <nav className=\"navigation-bar\">\r\n            <div className=\"logo\"></div>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"#\">\r\n                        <AiOutlineDashboard className=\"icon\"/>\r\n                        <span>Dashboard</span>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"active\">\r\n                    <Link to=\"/\">\r\n                        <AiOutlineBarChart className=\"icon\"/>\r\n                        <span>Monitoring</span>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\n//VIEWS\nimport { Home } from './views/Home';\nimport { StationInformation } from './views/StationInformation';\n\n//Components\nimport { NavigationBar } from './components/navigationBar';\n\nimport './styles/default.scss';\n\nconst App = (props) => {\n  return(\n    <>\n      <NavigationBar/>\n      <Main/>\n    </>\n  )\n}\n\nconst Main = () => {\n  return (\n    <main>\n      <Switch>\n        <Route path='/station-information/:id' component={StationInformation}/>\n        <Route path='/' component={Home}/>\n      </Switch>\n    </main>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <HashRouter basename='/'>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}